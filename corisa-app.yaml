# Corisa Application Schema
# This YAML defines the complete application structure for AI-native development
# AI Agent can read, modify, upsert, and reason about this schema intelligently

app:
  name: "Corisa Demo App"
  version: "1.0.0"
  description: "A revolutionary AI-native development system demo"
  metadata:
    created_at: "2024-01-01T00:00:00Z"
    last_modified: "2024-01-01T00:00:00Z"
    ai_agent_version: "1.0.0"

# Navigation and routing structure
menus:
  - id: "main_navigation"
    name: "Main Navigation"
    type: "primary"
    items:
      - id: "dashboard_menu"
        label: "Dashboard"
        icon: "dashboard"
        route: "/dashboard"
        page_ref: "dashboard_page"
        order: 1
      - id: "projects_menu"
        label: "Projects"
        icon: "folder"
        route: "/projects"
        page_ref: "projects_page"
        order: 2
      - id: "settings_menu"
        label: "Settings"
        icon: "settings"
        route: "/settings"
        page_ref: "settings_page"
        order: 3

# UI Pages - Each page contains sections and components
pages:
  - id: "dashboard_page"
    name: "Dashboard"
    route: "/dashboard"
    layout: "default"
    title: "Dashboard"
    description: "Main dashboard with project overview and key metrics"
    sections:
      - ref: "project_summary_card"
        order: 1
        config:
          title: "Project Overview"
          show_metrics: true
      - ref: "recent_projects_table"
        order: 2
        config:
          title: "Recent Projects"
          limit: 5
    components:
      - ref: "header_component"
        order: 1
      - ref: "navigation_component"
        order: 2

  - id: "project_detail_page"
    name: "Project Detail"
    route: "/projects/:id"
    layout: "detail"
    title: "Project Details"
    description: "Detailed view of a specific project"
    sections:
      - ref: "project_detail_form"
        order: 1
        config:
          mode: "view"
      - ref: "project_tasks_table"
        order: 2
        config:
          show_actions: true
    components:
      - ref: "header_component"
        order: 1
      - ref: "back_button"
        order: 2

  - id: "projects_page"
    name: "Projects"
    route: "/projects"
    layout: "list"
    title: "All Projects"
    description: "List of all projects with management capabilities"
    sections:
      - ref: "project_list_table"
        order: 1
        config:
          show_filters: true
          show_pagination: true
      - ref: "project_actions_panel"
        order: 2
        config:
          show_create: true
          show_bulk_actions: true
    components:
      - ref: "header_component"
        order: 1
      - ref: "search_component"
        order: 2

  - id: "settings_page"
    name: "Settings"
    route: "/settings"
    layout: "settings"
    title: "Settings"
    description: "Application settings and configuration"
    sections:
      - ref: "user_profile_form"
        order: 1
        config:
          mode: "edit"
      - ref: "app_preferences_form"
        order: 2
        config:
          show_advanced: false
    components:
      - ref: "header_component"
        order: 1

# Sections - Reusable page subcomponents
sections:
  - id: "project_list_table"
    name: "Project List Table"
    type: "table"
    description: "Displays projects in a sortable, filterable table format"
    data_source: "project_repository"
    actions:
      - ref: "view_project_button"
        trigger: "row_click"
      - ref: "edit_project_button"
        trigger: "action_menu"
      - ref: "delete_project_button"
        trigger: "action_menu"
    columns:
      - field: "name"
        label: "Project Name"
        sortable: true
        filterable: true
      - field: "status"
        label: "Status"
        type: "badge"
        sortable: true
      - field: "created_at"
        label: "Created"
        type: "date"
        sortable: true
      - field: "actions"
        label: "Actions"
        type: "actions"
        width: "120px"

  - id: "project_summary_card"
    name: "Project Summary Card"
    type: "card"
    description: "Shows key project metrics and summary information"
    data_source: "project_service"
    layout: "grid"
    metrics:
      - key: "total_projects"
        label: "Total Projects"
        type: "number"
        icon: "folder"
      - key: "active_projects"
        label: "Active Projects"
        type: "number"
        icon: "check_circle"
      - key: "completion_rate"
        label: "Completion Rate"
        type: "percentage"
        icon: "trending_up"

  - id: "project_detail_form"
    name: "Project Detail Form"
    type: "form"
    description: "Form for viewing and editing project details"
    data_source: "project_repository"
    mode: "view" # view, edit, create
    fields:
      - name: "name"
        label: "Project Name"
        type: "text"
        required: true
        validation:
          min_length: 3
          max_length: 100
      - name: "description"
        label: "Description"
        type: "textarea"
        rows: 4
      - name: "status"
        label: "Status"
        type: "select"
        options:
          - value: "active"
            label: "Active"
          - value: "completed"
            label: "Completed"
          - value: "archived"
            label: "Archived"
      - name: "start_date"
        label: "Start Date"
        type: "date"
      - name: "end_date"
        label: "End Date"
        type: "date"

  - id: "project_tasks_table"
    name: "Project Tasks Table"
    type: "table"
    description: "Shows tasks associated with a specific project"
    data_source: "task_repository"
    parent_entity: "project"
    columns:
      - field: "title"
        label: "Task Title"
        sortable: true
      - field: "status"
        label: "Status"
        type: "badge"
      - field: "assigned_to"
        label: "Assigned To"
        type: "user"
      - field: "due_date"
        label: "Due Date"
        type: "date"

  - id: "project_actions_panel"
    name: "Project Actions Panel"
    type: "panel"
    description: "Panel containing project management actions"
    actions:
      - ref: "create_project_button"
        order: 1
      - ref: "export_projects_button"
        order: 2
      - ref: "bulk_delete_button"
        order: 3

  - id: "user_profile_form"
    name: "User Profile Form"
    type: "form"
    description: "Form for editing user profile information"
    data_source: "user_repository"
    fields:
      - name: "first_name"
        label: "First Name"
        type: "text"
        required: true
      - name: "last_name"
        label: "Last Name"
        type: "text"
        required: true
      - name: "email"
        label: "Email"
        type: "email"
        required: true
      - name: "avatar"
        label: "Profile Picture"
        type: "file"
        accept: "image/*"

  - id: "app_preferences_form"
    name: "App Preferences Form"
    type: "form"
    description: "Form for application preferences and settings"
    data_source: "preferences_repository"
    fields:
      - name: "theme"
        label: "Theme"
        type: "select"
        options:
          - value: "light"
            label: "Light"
          - value: "dark"
            label: "Dark"
          - value: "auto"
            label: "Auto"
      - name: "notifications"
        label: "Enable Notifications"
        type: "checkbox"
      - name: "language"
        label: "Language"
        type: "select"
        options:
          - value: "en"
            label: "English"
          - value: "es"
            label: "Spanish"
          - value: "fr"
            label: "French"

# Components - Reusable UI building blocks
components:
  - id: "header_component"
    name: "Header"
    type: "layout"
    description: "Main application header with navigation and user menu"
    template: "header"
    props:
      show_logo: true
      show_navigation: true
      show_user_menu: true
    slots:
      - name: "logo"
        description: "Application logo area"
      - name: "navigation"
        description: "Main navigation menu"
      - name: "user_menu"
        description: "User account menu"

  - id: "button_component"
    name: "Button"
    type: "interactive"
    description: "Reusable button component with various styles and states"
    template: "button"
    variants:
      - name: "primary"
        styles:
          background: "#007bff"
          color: "white"
      - name: "secondary"
        styles:
          background: "#6c757d"
          color: "white"
      - name: "danger"
        styles:
          background: "#dc3545"
          color: "white"
    props:
      variant: "primary"
      size: "medium"
      disabled: false
      loading: false
    events:
      - name: "click"
        description: "Button click event"

  - id: "table_component"
    name: "Table"
    type: "data_display"
    description: "Reusable table component with sorting, filtering, and pagination"
    template: "table"
    props:
      data: []
      columns: []
      sortable: true
      filterable: true
      pagination: true
      page_size: 10
    events:
      - name: "sort"
        description: "Column sort event"
      - name: "filter"
        description: "Filter change event"
      - name: "page_change"
        description: "Pagination event"

  - id: "form_component"
    name: "Form"
    type: "input"
    description: "Reusable form component with validation and submission handling"
    template: "form"
    props:
      fields: []
      validation: {}
      submit_label: "Submit"
      cancel_label: "Cancel"
    events:
      - name: "submit"
        description: "Form submission event"
      - name: "cancel"
        description: "Form cancellation event"
      - name: "validation_error"
        description: "Validation error event"

  - id: "navigation_component"
    name: "Navigation"
    type: "navigation"
    description: "Main navigation component"
    template: "navigation"
    props:
      menu_ref: "main_navigation"
      active_route: ""

  - id: "search_component"
    name: "Search"
    type: "input"
    description: "Search input component with suggestions"
    template: "search"
    props:
      placeholder: "Search..."
      debounce_ms: 300
      show_suggestions: true
    events:
      - name: "search"
        description: "Search query event"
      - name: "suggestion_select"
        description: "Suggestion selection event"

  - id: "back_button"
    name: "Back Button"
    type: "navigation"
    description: "Button to navigate back to previous page"
    template: "button"
    props:
      variant: "secondary"
      icon: "arrow_back"
      text: "Back"

# Buttons - Action triggers bound to services
buttons:
  - id: "view_project_button"
    name: "View Project"
    component_ref: "button_component"
    variant: "primary"
    size: "small"
    text: "View"
    icon: "visibility"
    action:
      type: "navigation"
      target: "project_detail_page"
      params:
        id: "{{row.id}}"

  - id: "edit_project_button"
    name: "Edit Project"
    component_ref: "button_component"
    variant: "secondary"
    size: "small"
    text: "Edit"
    icon: "edit"
    action:
      type: "navigation"
      target: "project_detail_page"
      params:
        id: "{{row.id}}"
        mode: "edit"

  - id: "delete_project_button"
    name: "Delete Project"
    component_ref: "button_component"
    variant: "danger"
    size: "small"
    text: "Delete"
    icon: "delete"
    action:
      type: "service_call"
      service: "project_service"
      method: "delete_project"
      params:
        id: "{{row.id}}"
      confirmation:
        title: "Delete Project"
        message: "Are you sure you want to delete this project?"

  - id: "create_project_button"
    name: "Create Project"
    component_ref: "button_component"
    variant: "primary"
    size: "medium"
    text: "Create Project"
    icon: "add"
    action:
      type: "navigation"
      target: "project_detail_page"
      params:
        mode: "create"

  - id: "export_projects_button"
    name: "Export Projects"
    component_ref: "button_component"
    variant: "secondary"
    size: "medium"
    text: "Export"
    icon: "download"
    action:
      type: "service_call"
      service: "project_service"
      method: "export_projects"

  - id: "bulk_delete_button"
    name: "Bulk Delete"
    component_ref: "button_component"
    variant: "danger"
    size: "medium"
    text: "Delete Selected"
    icon: "delete_sweep"
    action:
      type: "service_call"
      service: "project_service"
      method: "bulk_delete_projects"
      params:
        ids: "{{selected_ids}}"

# Services - Core business logic layer
services:
  - id: "project_service"
    name: "Project Service"
    description: "Handles project-related business logic and operations"
    repository_ref: "project_repository"
    methods:
      - name: "get_projects"
        description: "Retrieve list of projects with optional filtering"
        params:
          - name: "filters"
            type: "object"
            required: false
          - name: "page"
            type: "number"
            required: false
            default: 1
          - name: "limit"
            type: "number"
            required: false
            default: 10
        returns: "Project[]"
        business_logic:
          - "Apply filters if provided"
          - "Handle pagination"
          - "Transform data for UI consumption"

      - name: "get_project_by_id"
        description: "Retrieve a specific project by ID"
        params:
          - name: "id"
            type: "string"
            required: true
        returns: "Project"
        business_logic:
          - "Validate project ID"
          - "Check user permissions"
          - "Include related data (tasks, members)"

      - name: "create_project"
        description: "Create a new project"
        params:
          - name: "project_data"
            type: "ProjectCreate"
            required: true
        returns: "Project"
        business_logic:
          - "Validate project data"
          - "Set default values"
          - "Assign current user as owner"
          - "Create initial project structure"

      - name: "update_project"
        description: "Update an existing project"
        params:
          - name: "id"
            type: "string"
            required: true
          - name: "project_data"
            type: "ProjectUpdate"
            required: true
        returns: "Project"
        business_logic:
          - "Validate project exists"
          - "Check user permissions"
          - "Update project data"
          - "Log changes for audit"

      - name: "delete_project"
        description: "Delete a project"
        params:
          - name: "id"
            type: "string"
            required: true
        returns: "boolean"
        business_logic:
          - "Validate project exists"
          - "Check user permissions"
          - "Soft delete project"
          - "Clean up related resources"

      - name: "bulk_delete_projects"
        description: "Delete multiple projects"
        params:
          - name: "ids"
            type: "string[]"
            required: true
        returns: "boolean"
        business_logic:
          - "Validate all projects exist"
          - "Check user permissions for each"
          - "Batch delete projects"
          - "Return success count"

      - name: "export_projects"
        description: "Export projects to various formats"
        params:
          - name: "format"
            type: "string"
            required: false
            default: "csv"
          - name: "filters"
            type: "object"
            required: false
        returns: "ExportResult"
        business_logic:
          - "Apply filters if provided"
          - "Generate export file"
          - "Return download URL"

      - name: "get_project_metrics"
        description: "Get project summary metrics"
        params:
          - name: "user_id"
            type: "string"
            required: false
        returns: "ProjectMetrics"
        business_logic:
          - "Calculate total projects"
          - "Calculate active projects"
          - "Calculate completion rate"
          - "Return aggregated metrics"

# Repositories - Data access layer
repositories:
  - id: "project_repository"
    name: "Project Repository"
    description: "Handles data access for project entities"
    data_source: "database"
    table: "projects"
    methods:
      - name: "find_all"
        description: "Find all projects with optional filters"
        sql: "SELECT * FROM projects WHERE {{filters}} ORDER BY created_at DESC"
        params:
          - name: "filters"
            type: "object"
            required: false

      - name: "find_by_id"
        description: "Find project by ID"
        sql: "SELECT * FROM projects WHERE id = ?"
        params:
          - name: "id"
            type: "string"
            required: true

      - name: "create"
        description: "Create new project"
        sql: "INSERT INTO projects (name, description, status, owner_id, created_at) VALUES (?, ?, ?, ?, ?)"
        params:
          - name: "name"
            type: "string"
            required: true
          - name: "description"
            type: "string"
            required: false
          - name: "status"
            type: "string"
            required: true
          - name: "owner_id"
            type: "string"
            required: true
          - name: "created_at"
            type: "datetime"
            required: true

      - name: "update"
        description: "Update existing project"
        sql: "UPDATE projects SET name = ?, description = ?, status = ?, updated_at = ? WHERE id = ?"
        params:
          - name: "name"
            type: "string"
            required: true
          - name: "description"
            type: "string"
            required: false
          - name: "status"
            type: "string"
            required: true
          - name: "updated_at"
            type: "datetime"
            required: true
          - name: "id"
            type: "string"
            required: true

      - name: "delete"
        description: "Soft delete project"
        sql: "UPDATE projects SET deleted_at = ? WHERE id = ?"
        params:
          - name: "deleted_at"
            type: "datetime"
            required: true
          - name: "id"
            type: "string"
            required: true

      - name: "bulk_delete"
        description: "Soft delete multiple projects"
        sql: "UPDATE projects SET deleted_at = ? WHERE id IN (?)"
        params:
          - name: "deleted_at"
            type: "datetime"
            required: true
          - name: "ids"
            type: "string[]"
            required: true

      - name: "count"
        description: "Count projects with optional filters"
        sql: "SELECT COUNT(*) FROM projects WHERE {{filters}}"
        params:
          - name: "filters"
            type: "object"
            required: false

  - id: "task_repository"
    name: "Task Repository"
    description: "Handles data access for task entities"
    data_source: "database"
    table: "tasks"
    methods:
      - name: "find_by_project"
        description: "Find tasks by project ID"
        sql: "SELECT * FROM tasks WHERE project_id = ? ORDER BY created_at DESC"
        params:
          - name: "project_id"
            type: "string"
            required: true

  - id: "user_repository"
    name: "User Repository"
    description: "Handles data access for user entities"
    data_source: "database"
    table: "users"
    methods:
      - name: "find_by_id"
        description: "Find user by ID"
        sql: "SELECT * FROM users WHERE id = ?"
        params:
          - name: "id"
            type: "string"
            required: true

      - name: "update_profile"
        description: "Update user profile"
        sql: "UPDATE users SET first_name = ?, last_name = ?, email = ?, avatar_url = ?, updated_at = ? WHERE id = ?"
        params:
          - name: "first_name"
            type: "string"
            required: true
          - name: "last_name"
            type: "string"
            required: true
          - name: "email"
            type: "string"
            required: true
          - name: "avatar_url"
            type: "string"
            required: false
          - name: "updated_at"
            type: "datetime"
            required: true
          - name: "id"
            type: "string"
            required: true

  - id: "preferences_repository"
    name: "Preferences Repository"
    description: "Handles data access for user preferences"
    data_source: "database"
    table: "user_preferences"
    methods:
      - name: "find_by_user"
        description: "Find preferences by user ID"
        sql: "SELECT * FROM user_preferences WHERE user_id = ?"
        params:
          - name: "user_id"
            type: "string"
            required: true

      - name: "update_preferences"
        description: "Update user preferences"
        sql: "INSERT INTO user_preferences (user_id, theme, notifications, language, updated_at) VALUES (?, ?, ?, ?, ?) ON DUPLICATE KEY UPDATE theme = VALUES(theme), notifications = VALUES(notifications), language = VALUES(language), updated_at = VALUES(updated_at)"
        params:
          - name: "user_id"
            type: "string"
            required: true
          - name: "theme"
            type: "string"
            required: true
          - name: "notifications"
            type: "boolean"
            required: true
          - name: "language"
            type: "string"
            required: true
          - name: "updated_at"
            type: "datetime"
            required: true

# Data Models - Type definitions for entities
models:
  Project:
    fields:
      id:
        type: "string"
        description: "Unique project identifier"
      name:
        type: "string"
        description: "Project name"
        validation:
          required: true
          min_length: 3
          max_length: 100
      description:
        type: "string"
        description: "Project description"
        validation:
          max_length: 500
      status:
        type: "string"
        description: "Project status"
        enum: ["active", "completed", "archived"]
        default: "active"
      owner_id:
        type: "string"
        description: "Project owner user ID"
      created_at:
        type: "datetime"
        description: "Project creation timestamp"
      updated_at:
        type: "datetime"
        description: "Project last update timestamp"
      deleted_at:
        type: "datetime"
        description: "Project deletion timestamp (soft delete)"

  ProjectCreate:
    fields:
      name:
        type: "string"
        required: true
      description:
        type: "string"
        required: false
      status:
        type: "string"
        required: false
        default: "active"

  ProjectUpdate:
    fields:
      name:
        type: "string"
        required: false
      description:
        type: "string"
        required: false
      status:
        type: "string"
        required: false

  ProjectMetrics:
    fields:
      total_projects:
        type: "number"
        description: "Total number of projects"
      active_projects:
        type: "number"
        description: "Number of active projects"
      completion_rate:
        type: "number"
        description: "Project completion rate as percentage"

  Task:
    fields:
      id:
        type: "string"
      title:
        type: "string"
        required: true
      description:
        type: "string"
      status:
        type: "string"
        enum: ["todo", "in_progress", "completed"]
        default: "todo"
      project_id:
        type: "string"
        required: true
      assigned_to:
        type: "string"
      due_date:
        type: "datetime"
      created_at:
        type: "datetime"

  User:
    fields:
      id:
        type: "string"
      first_name:
        type: "string"
        required: true
      last_name:
        type: "string"
        required: true
      email:
        type: "string"
        required: true
      avatar_url:
        type: "string"
      created_at:
        type: "datetime"

  UserPreferences:
    fields:
      user_id:
        type: "string"
        required: true
      theme:
        type: "string"
        enum: ["light", "dark", "auto"]
        default: "light"
      notifications:
        type: "boolean"
        default: true
      language:
        type: "string"
        enum: ["en", "es", "fr"]
        default: "en"

# AI Agent Configuration
ai_agent:
  capabilities:
    - "yaml_generation"
    - "yaml_modification"
    - "code_generation"
    - "feature_evolution"
    - "legacy_migration"
  
  patterns:
    # Pattern for adding new features
    add_feature:
      description: "Add a new feature to the application"
      steps:
        - "Identify required entities (pages, sections, components, services, repositories)"
        - "Define data models and relationships"
        - "Create or update YAML schema"
        - "Generate corresponding code"
        - "Update navigation and routing"
    
    # Pattern for modifying existing features
    modify_feature:
      description: "Modify an existing feature"
      steps:
        - "Locate relevant YAML sections"
        - "Update entity definitions"
        - "Regenerate affected code"
        - "Maintain data consistency"
    
    # Pattern for extracting from legacy code
    extract_from_legacy:
      description: "Extract YAML from existing codebase"
      steps:
        - "Analyze code structure"
        - "Identify entities and relationships"
        - "Generate corresponding YAML"
        - "Validate schema completeness"

  evolution_examples:
    - scenario: "Add user authentication"
      description: "Add login/logout functionality with user management"
      entities_to_add:
        - "auth_pages: Login, Register, ForgotPassword"
        - "auth_service: AuthenticationService"
        - "user_repository: UserRepository"
        - "auth_components: LoginForm, RegisterForm"
        - "auth_buttons: LoginButton, LogoutButton"
    
    - scenario: "Add payment integration"
      description: "Integrate Stripe for payment processing"
      entities_to_add:
        - "payment_pages: PaymentForm, PaymentHistory"
        - "payment_service: PaymentService"
        - "stripe_repository: StripeRepository"
        - "payment_components: PaymentForm, PaymentStatus"
        - "payment_buttons: PayButton, CancelSubscriptionButton"
    
    - scenario: "Add dark mode"
      description: "Implement theme switching functionality"
      entities_to_modify:
        - "user_preferences: Add theme field"
        - "theme_service: ThemeService"
        - "theme_components: ThemeToggle"
        - "existing_components: Update for theme support"

# Generation Rules for AI Agent
generation_rules:
  yaml_structure:
    - "Always maintain consistent indentation and formatting"
    - "Use descriptive IDs and names for all entities"
    - "Include comprehensive descriptions for AI understanding"
    - "Define clear relationships between entities using refs"
    - "Use consistent naming conventions (snake_case for IDs, PascalCase for types)"
  
  entity_relationships:
    - "Pages contain sections and components"
    - "Sections reference components and data sources"
    - "Buttons trigger actions on services"
    - "Services use repositories for data access"
    - "Components can be reused across multiple sections"
  
  ai_evolution:
    - "When adding features, identify all required entities"
    - "Maintain referential integrity in YAML"
    - "Update related entities when modifying existing ones"
    - "Preserve existing functionality when evolving"
    - "Document changes for future AI understanding"